version: '3.9'

services:
  base-image:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    image: teamit/base:latest

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8000:8000"
    depends_on:
      base-image:
        condition: service_completed_successfully
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      team-service:
        condition: service_healthy
      project-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    volumes:
      - ./shared:/shared
    networks:
      - frontend-network
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  auth-service:
    build: ./auth-service
    env_file: ./auth-service/.env
    container_name: auth-service
    ports:
      - "8001:8000"
    depends_on:
      base-image:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - ./shared:/shared
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  user-service:
    build: ./user-service
    env_file: ./user-service/.env
    container_name: user-service
    ports:
      - "8002:8000"
    depends_on:
      base-image:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - ./shared:/shared
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  team-service:
    build: ./team-service
    env_file: ./team-service/.env
    container_name: team-service
    ports:
      - "8003:8000"
    depends_on:
      base-image:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
    volumes:
      - ./shared:/shared
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  project-service:
    build: ./project-service
    env_file: ./project-service/.env
    container_name: project-service
    ports:
      - "8004:8000"
    depends_on:
      base-image:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
    volumes:
      - ./shared:/shared
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  notification-service:
    build: ./notification-service
    env_file: ./notification-service/.env
    container_name: notification-service
    ports:
      - "8005:8000"
    depends_on:
      base-image:
        condition: service_completed_successfully
      mongodb:
        condition: service_healthy
    volumes:
      - ./shared:/shared
    networks:
      - backend-network
      - database-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:15
    container_name: postgres
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U teamit_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - database-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  mongo_data:

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  database-network:
    driver: bridge